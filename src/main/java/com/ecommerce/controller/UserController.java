package com.ecommerce.controller;


import java.util.HashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.model.Roles;
import com.ecommerce.model.User;
import com.ecommerce.model.UserRole;
import com.ecommerce.payload.UserRequest;
import com.ecommerce.payload.UserResponse;
import com.ecommerce.service.IUserService;
import com.ecommerce.util.JwtUtils;

@RestController
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private IUserService userService;
	@Autowired
	private JwtUtils jwtUtils;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	
	@PostMapping("/add")
	public User createUser(@RequestBody User user) throws Exception
	{
		System.err.println("controller");
		Set<UserRole> roles=new HashSet<>();
		Roles role=new Roles();
		role.setId(1L);
		role.setRoleName("ADMIN");
		System.err.println("role"+role);
		UserRole userRole=new UserRole();
		userRole.setUser(user);
		userRole.setRole(role);
		System.err.println(userRole.toString());
		roles.add(userRole);
		return this.userService.createUser(user, roles);
	}
	//LOGIN
//	@PostMapping("/login")
//	public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest userRequest){
//		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
//				
//				 userRequest.getUsername()
//				,userRequest.getPassword())
//				
//				);
//		String token=jwtUtils.genrateToken(userRequest.getUsername());
//		return ResponseEntity.ok(new UserResponse(token,"genrated by surbhi"));
//	}
	
	@PostMapping("/login")
    public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest userRequest) {
        try {
            // Try to authenticate the user
            authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(userRequest.getUsername(), userRequest.getPassword())
            );

            // If authentication is successful, generate a JWT token
            String token = jwtUtils.genrateToken(userRequest.getUsername());

            // Return the response with token
            return ResponseEntity.ok(new UserResponse(token, "Generated by Surbhi"));
        } catch (BadCredentialsException e) {
            // Catch the exception if authentication fails
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(new UserResponse(null, "Invalid credentials"));
        } catch (Exception e) {
            // Catch any other exception
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new UserResponse(null, "An error occurred"));
        }
    }
	
	//get user by id
	@GetMapping("/get/{id}")
	public ResponseEntity<User> getUserById(@PathVariable Long id)
	{
	  User user=this.userService.getUserById(id);
	  return new ResponseEntity<User>(user,HttpStatus.OK);
	}
	
	//update user
	@PutMapping("/update")
	public ResponseEntity<User> updateUser(@RequestBody User user)
	{
	 User updateUser=this.userService.updateUser(user);
	 return new ResponseEntity<User>(updateUser,HttpStatus.OK);
	}
}
